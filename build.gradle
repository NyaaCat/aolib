plugins {
    id 'java-library'
    id 'maven-publish'
    id("xyz.jpenilla.run-paper") version "1.0.6"
}
def minecraftVer = "1.18.2"
group = 'cat.nyaa'
archivesBaseName = "${project.name}-mc$minecraftVer"

def buildNumber = System.getenv('BUILD_NUMBER') == null ? "x" : System.getenv('BUILD_NUMBER')
def mavenDirectory = System.getenv('MAVEN_DIR') == null ? "$projectDir/repo" : System.getenv('MAVEN_DIR')
def jdDirectory = System.getenv('JAVADOCS_DIR') == null ? null : System.getenv('JAVADOCS_DIR')

version = '1.0' + "." + buildNumber

repositories {
    mavenCentral()
    maven { url = "https://repo.dmulloy2.net/repository/public/" }
    maven { name = 'spigotmc-repo'; url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { name = 'sonatype'; url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { name = 'NyaaCat'; url = 'https://ci.nyaacat.com/maven/' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:$minecraftVer-R0.1-SNAPSHOT"
    compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.8.0"
    // other nyaa plugins
    if (gradle.hasProperty("useLocalDependencies") && gradle.useLocalDependencies) {
        compileOnly project(":NyaaCore")
    } else {
        compileOnly('cat.nyaa:nyaacore:9.0-SNAPSHOT')
    }

    compileOnly 'org.jetbrains:annotations:22.0.0'
   // compileOnly 'it.unimi.dsi:fastutil:8.5.6'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.2')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.2')
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = 'UTF-8'
    options.release.set(17)
}

javadoc {
//    source = sourceSets.main.allJava
    // javadoc output folder
    if (jdDirectory != null) destinationDir = file("${jdDirectory}/${rootProject.name}-${version}")

    options.with {
        links 'https://docs.oracle.com/en/java/javase/17/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://guava.dev/releases/21.0/api/docs/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'
    }
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addBooleanOption('Xdoclint:none', true)
}


test {
    useJUnitPlatform()
}

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion(minecraftVer)
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    //from sourceSets.main.java.srcDirs
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url mavenDirectory
        }
    }
}
