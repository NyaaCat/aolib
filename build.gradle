plugins {
    id 'java-library'
    id 'maven-publish'
    id("xyz.jpenilla.run-paper") version "1.0.6"
}
def minecraftVer = "1.19.2"
group = 'cat.nyaa'
archivesBaseName = "${project.name}-mc$minecraftVer"

def buildNumber = System.getenv('BUILD_NUMBER') == null ? "x" : System.getenv('BUILD_NUMBER')
def mavenDirectory = System.getenv('MAVEN_DIR') == null ? "$projectDir/repo" : System.getenv('MAVEN_DIR')
def jdDirectory = System.getenv('JAVADOCS_DIR') == null ? null : System.getenv('JAVADOCS_DIR')

String deobfedJar = DownloadFile(System.env.NMS_JAR, mavenDirectory,
        "spigot-${minecraftVer}-latest-deobfed.jar",
        "https://ci.nyaacat.com/maven/spigot-${minecraftVer}-latest-deobfed.jar")

version = '1.0' + "." + buildNumber

repositories {
    mavenCentral()
    maven { name 'papermc'; url "https://repo.papermc.io/repository/maven-public/" }
    maven { name 'Bugjang'; url 'https://libraries.minecraft.net' }
    maven { name 'dmulloy2'; url 'https://repo.dmulloy2.net/content/groups/public/' }
    maven { name = 'spigotmc-repo'; url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { name = 'sonatype'; url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { name = 'NyaaCat'; url = 'https://ci.nyaacat.com/maven/' }
    //mavenLocal()
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:$minecraftVer-R0.1-SNAPSHOT"
    compileOnly files(deobfedJar)
    compileOnly(group: "com.comphenix.protocol", name: "ProtocolLib", version: "5.0.0-SNAPSHOT")
    // other nyaa plugins
    compileOnly('cat.nyaa:nyaacore:9.0-SNAPSHOT')
    compileOnly 'org.jetbrains:annotations:23.0.0'

    //plugin
    testImplementation('cat.nyaa:nyaacore:9.0-SNAPSHOT')
    testImplementation group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.8.0"
    //spigot
    testImplementation files(deobfedJar)
    //testImplementation "org.spigotmc:spigot:$minecraftVer-R0.1-SNAPSHOT"

    testImplementation 'org.xerial:sqlite-jdbc:3.39.3.0'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.19:2.119.3'
    testImplementation "org.spigotmc:spigot:$minecraftVer-R0.1-SNAPSHOT"
    testImplementation(platform('org.junit:junit-bom:5.9.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = 'UTF-8'
    options.release.set(17)
}

javadoc {
//    source = sourceSets.main.allJava
    // javadoc output folder
    if (jdDirectory != null) destinationDir = file("${jdDirectory}/${rootProject.name}-${version}")

    options.with {
        links 'https://docs.oracle.com/en/java/javase/17/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://guava.dev/releases/21.0/api/docs/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'
    }
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addBooleanOption('Xdoclint:none', true)
}


test {
    useJUnitPlatform()
}

runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion(minecraftVer)
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    //from sourceSets.main.java.srcDirs
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url mavenDirectory
        }
    }
}

String DownloadFile(String manual_override, String mavenDirectory, String filename, String url) {
    String ret = ""
    if (manual_override != null) {
        ret = manual_override
        if (new File(ret).exists()) {
            logger.warn("Manually selected: ${ret}")
            return ret
        } else {
            throw new GradleException("File not found: ${ret}")
        }
    }

    // ci environment
    if (new File("${mavenDirectory}/${filename}").exists()) {
        return "${mavenDirectory}/${filename}"
    }

    // check local dir (dev environment)
    ret = "${projectDir}/../nms_binaries/${filename}"
    if (!(new File(ret).exists())) {
        // nms not found, download from nyaaci
        def f = new File(ret)
        println "Downloading ${filename}"
        f.getParentFile().mkdirs()
        new URL(url).withInputStream { i -> f.withOutputStream { it << i } }
    }
    println("Found file: ${filename} => ${ret}")
    return ret
}